{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst cors = require('cors');\n\nconst Database = require('./database/db');\n\nconst saveData = require('./database/saveData');\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.get(\"/\", (req, res) => {\n  const request = req.body;\n  console.log(request);\n  res.send(\"This is Home Automation Server\");\n});\napp.get('/getdata', async (req, res) => {\n  const db = await Database;\n  const data = await db.all(\"SELECT * FROM rooms\");\n\n  try {\n    return res.json(data);\n  } catch (error) {\n    console.log(error);\n    return res.send('Erro no banco de dados');\n  }\n});\napp.post('/savedata', async (req, res) => {\n  const name = req.body.name;\n  const ip = req.body.ip;\n\n  try {\n    const db = await Database;\n    await saveData(db, {\n      name: name,\n      ip: ip\n    });\n    const dbColector = await db.all(\"SELECT * FROM rooms\");\n    console.log(dbColector);\n    return res.send('Successful');\n  } catch (error) {\n    console.log(error);\n    return res.send('Erro no banco de dados');\n  }\n});\napp.post('/removedata', async (req, res) => {\n  const id = req.body.id;\n\n  try {\n    const db = await Database;\n    await db.run(`DELETE FROM rooms WHERE id = ${id}`);\n    const dbColector = await db.all(\"SELECT * FROM rooms\");\n    console.log(dbColector);\n  } catch (error) {\n    console.log(error);\n    return res.send('Erro no banco de dados');\n  }\n});\napp.listen(5500, () => {\n  console.log(\"Running my server\");\n});","map":{"version":3,"sources":["C:/Users/lucas.mazur/OneDrive/Criando um site/homeAutomation/pages/api/server.ts"],"names":["express","require","bodyParser","cors","Database","saveData","app","use","json","urlencoded","extended","get","req","res","request","body","console","log","send","db","data","all","error","post","name","ip","dbColector","id","run","listen"],"mappings":"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","sourcesContent":["const express = require('express')\r\nconst bodyParser = require('body-parser')\r\nconst cors = require('cors')\r\nconst Database = require('./database/db')\r\nconst saveData = require('./database/saveData')\r\n\r\nconst app = express()\r\n\r\napp.use(cors())\r\napp.use(express.json())\r\napp.use(bodyParser.urlencoded({extended: true}))\r\n\r\napp.get(\"/\", (req, res) => {\r\n    const request = req.body\r\n    console.log(request)\r\n    res.send(\"This is Home Automation Server\")\r\n})\r\n\r\napp.get('/getdata', async (req, res) => {\r\n    const db = await Database;\r\n    const data = await db.all(\"SELECT * FROM rooms\")\r\n    try {\r\n        return res.json(data)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados')\r\n    }    \r\n})\r\n\r\napp.post('/savedata', async (req, res) => {\r\n    const name = req.body.name\r\n    const ip = req.body.ip\r\n    try {\r\n        const db = await Database;\r\n        await saveData(db, {\r\n            name: name,\r\n            ip: ip\r\n        })\r\n        const dbColector = await db.all(\"SELECT * FROM rooms\")\r\n         console.log(dbColector)\r\n        return res.send('Successful')\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados') \r\n    }\r\n})\r\n\r\napp.post('/removedata', async (req, res) => {\r\n    const id = req.body.id\r\n    try {\r\n        const db = await Database;\r\n        await db.run(`DELETE FROM rooms WHERE id = ${id}`)\r\n        const dbColector = await db.all(\"SELECT * FROM rooms\")\r\n        console.log(dbColector)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados')         \r\n    }\r\n})\r\n\r\napp.listen(5500, () => {\r\n    console.log(\"Running my server\")\r\n})"]},"metadata":{},"sourceType":"script"}