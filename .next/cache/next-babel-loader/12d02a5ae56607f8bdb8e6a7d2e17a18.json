{"ast":null,"code":"const Database = require('./database/db');\n\nconst saveData = require('./database/saveData');\n\nexport default (async (req, res) => {\n  const db = await Database;\n  const data = await db.all(\"SELECT * FROM rooms\");\n\n  try {\n    return res.json(data);\n  } catch (error) {\n    console.log(error);\n    return res.send('Erro no banco de dados');\n  }\n});\n/*app.get(\"/\", (req, res) => {\r\n    const request = req.body\r\n    console.log(request)\r\n    res.send(\"This is Home Automation Server\")\r\n})\r\n\r\napp.get('/getdata', async (req, res) => {\r\n    const db = await Database;\r\n    const data = await db.all(\"SELECT * FROM rooms\")\r\n    try {\r\n        return res.json(data)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados')\r\n    }    \r\n})\r\n\r\napp.post('/savedata', async (req, res) => {\r\n    const name = req.body.name\r\n    const ip = req.body.ip\r\n    try {\r\n        const db = await Database;\r\n        await saveData(db, {\r\n            name: name,\r\n            ip: ip\r\n        })\r\n        const dbColector = await db.all(\"SELECT * FROM rooms\")\r\n         console.log(dbColector)\r\n        return res.send('Successful')\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados') \r\n    }\r\n})\r\n\r\napp.post('/removedata', async (req, res) => {\r\n    const id = req.body.id\r\n    try {\r\n        const db = await Database;\r\n        await db.run(`DELETE FROM rooms WHERE id = ${id}`)\r\n        const dbColector = await db.all(\"SELECT * FROM rooms\")\r\n        console.log(dbColector)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados')         \r\n    }\r\n})\r\n\r\napp.listen(5500, () => {\r\n    console.log(\"Running my server\")\r\n})*/","map":{"version":3,"sources":["C:/Users/lucas.mazur/OneDrive/Criando um site/homeAutomation/pages/api/server.ts"],"names":["Database","require","saveData","req","res","db","data","all","json","error","console","log","send"],"mappings":"AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,qBAAD,CAAxB;;AAEA,gBAAe,OAAOE,GAAP,EAAwBC,GAAxB,KAA6C;AACxD,QAAMC,EAAE,GAAG,MAAML,QAAjB;AACA,QAAMM,IAAI,GAAG,MAAMD,EAAE,CAACE,GAAH,CAAO,qBAAP,CAAnB;;AACA,MAAI;AACA,WAAOH,GAAG,CAACI,IAAJ,CAASF,IAAT,CAAP;AACH,GAFD,CAEE,OAAOG,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAOL,GAAG,CAACQ,IAAJ,CAAS,wBAAT,CAAP;AACH;AACJ,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { NowRequest, NowResponse } from '@vercel/node'\r\nconst Database = require('./database/db')\r\nconst saveData = require('./database/saveData')\r\n\r\nexport default async (req: NowRequest, res: NowResponse) => {\r\n    const db = await Database;\r\n    const data = await db.all(\"SELECT * FROM rooms\")\r\n    try {\r\n        return res.json(data)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados')\r\n    }    \r\n}\r\n\r\n/*app.get(\"/\", (req, res) => {\r\n    const request = req.body\r\n    console.log(request)\r\n    res.send(\"This is Home Automation Server\")\r\n})\r\n\r\napp.get('/getdata', async (req, res) => {\r\n    const db = await Database;\r\n    const data = await db.all(\"SELECT * FROM rooms\")\r\n    try {\r\n        return res.json(data)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados')\r\n    }    \r\n})\r\n\r\napp.post('/savedata', async (req, res) => {\r\n    const name = req.body.name\r\n    const ip = req.body.ip\r\n    try {\r\n        const db = await Database;\r\n        await saveData(db, {\r\n            name: name,\r\n            ip: ip\r\n        })\r\n        const dbColector = await db.all(\"SELECT * FROM rooms\")\r\n         console.log(dbColector)\r\n        return res.send('Successful')\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados') \r\n    }\r\n})\r\n\r\napp.post('/removedata', async (req, res) => {\r\n    const id = req.body.id\r\n    try {\r\n        const db = await Database;\r\n        await db.run(`DELETE FROM rooms WHERE id = ${id}`)\r\n        const dbColector = await db.all(\"SELECT * FROM rooms\")\r\n        console.log(dbColector)\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.send('Erro no banco de dados')         \r\n    }\r\n})\r\n\r\napp.listen(5500, () => {\r\n    console.log(\"Running my server\")\r\n})*/"]},"metadata":{},"sourceType":"module"}